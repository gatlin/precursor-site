[
  {
    "id": 0,
    "byline": "generators",
    "text_multiline": [
      "(letrec (",
      "  (yield (\\ (value) (shift k",
      "    (! (\\ (p)",
      "      ((? p) value k))))))",
      "",
      "  (next (\\ (gen)",
      "    (let k ( (? gen) (! (\\ (a b) b)))",
      "    (k _))))",
      "",
      "  (peek (\\ (gen)",
      "    ( (? gen) (! (\\ (a b) a)))))",
      "  )",
      "(let gen (reset",
      "  (let _ ((? yield) 1)",
      "  (let _ ((? yield) 2)",
      "         ((? yield) 3))))",
      "",
      "(let n1 ((? peek) gen)",
      "(let gen ((? next) gen)",
      "",
      "(let n2 ((? peek) gen)",
      "(let gen ((? next) gen)",
      "",
      "(let n3 ((? peek) gen)",
      "(op:add (op:add n1 n2) n3)))))))",
      ")"
    ]
  },
  {
    "id": 1,
    "byline": "continuations",
    "text_multiline": [
      "(letrec (",
      "  (thirteen (\\ ()",
      "    (let twelve (reset",
      "    (let three-then-six (shift times-2",
      "      (let six (times-2 3)",
      "      (times-2 six)))",
      "      (op:mul 2 three-then-six)))",
      "    (op:add twelve 1))))",
      ")",
      " (let n ((? thirteen))",
      "  (op:concat \"Result: \" (! (op:num->str n))))",
      ")"
    ]
  },
  {
    "id": 2,
    "byline": "reducers & closures",
    "text_multiline": [
      "(letrec (",
      "  ; \"Objects are a poor man's closures;",
"  ; closures are a poor man's objects.\"",
      "  ; - Anton van Straaten, paraphrased",
      "  (make-reducer (\\ (initial-value) (letrec (",
      "    (loop (\\ (acc first-run) (reset",
      "      (let str (shift k k)",
      "      (if (op:and",
      "            (op:eq str \"\")",
      "            (op:not first-run))",
      "        acc",
      "        ((? loop) (op:concat acc str) #f  ))))))",
      "    )",
      "    ((? loop) initial-value #t)",
      "  )))",
      ")",
      "(let the-reducer ((? make-reducer) \"\")",
      "(let the-reducer (the-reducer \"hello\")",
      "(let the-reducer (the-reducer \", world\")",
      "(the-reducer \"\"))))",
      ")"

    ]
  },
  {
    "id": 3,
    "byline": "data structures",
    "text_multiline": [
      "(letrec (",
      "  ; a list is defined in terms of its so-called \"right fold\" ",
      "  (foldr (\\ (fn init-value the-list)",
      "    (let the-list (? the-list)",
      "    ( (? the-list) fn init-value ) )))",
      "",
      "  ; two constructors: empty list ...",
      "  (nil (\\ () (! (\\ (c e) e))))",
      "",
      "  ; ... and prepending an item to an existing list",
      "  (cons (\\ (x xs) (! (\\ (c e)",
      "    ( (? c)",
      "      x",
      "      (! ( (? foldr)",
      "        c",
      "        e",
      "        xs )))))))",
      ")",
      "(let list-1",
      "  (! ((? cons) 17",
      "  (! ((? cons) 20",
      "  (! ((? cons) 86",
      "  (! ((? nil)))))))))",
      "( (? foldr)",
      "    (! (\\ (a b)",
      "      (let a (? a)",
      "      (let b (? b)",
      "      (op:add a b)))))",
      "    0",
      "    list-1 ))",
      ")"
    ]
  }
]
