[
  {
    "id": 0,
    "text_multiline": [
      "(letrec (",
      "  (yield (\\ (value) (shift k (! (\\ (p) ((? p) value k))))))",
      "  (next (λ (gen)",
      "    (let k ( (? gen) (! (\\ (a b) b)))",
      "    (k _))))",
      "  (peek (λ (gen)",
      "    ( (? gen) (! (\\ (a b) a)))))",
      "  )",
      "(let gen (reset",
      "  (let _ ((? yield) 1)",
      "  (let _ ((? yield) 2)",
      "         ((? yield) 3))))",
      "(let n1 ((? peek) gen)",
      "(let gen ((? next) gen)",
      "(let n2 ((? peek) gen)",
      "(let gen ((? next) gen)",
      "(let n3 ((? peek) gen)",
      "(prim-add (prim-add n1 n2) n3)))))))",
      ")"
    ]
  },
  {
    "id": 1,
    "text_multiline": [
"(letrec (",
"  (make-reducer (\\ (initial-value) (letrec (",
"    (loop (\\ (total first-run) (reset",
"      (let n (shift k k)",
"      (if (prim-and",
"            (prim-eq n 0)",
"            (prim-not first-run))",
"        total",
"        ((? loop) (prim-add n total) #f  ))))))",
"    )",
"    ((? loop) initial-value #t)",
"  )))",
")",
"(let the-reducer ((? make-reducer) 911177)",
"(let the-reducer (the-reducer 69)",
"(let the-reducer (the-reducer 420)",
"(the-reducer 0))))",
")"
    ]
  },
  {
    "id": 2,
    "text_multiline": [
"(letrec (",
"  (thirteen (\\ ()",
"    (let twelve (reset",
"      (let three-then-six (shift times-2",
"        (let six (times-2 3)",
"        (times-2 six)))",
"      (prim-mul 2 three-then-six)))",
"    (prim-add twelve 1))))",
" (factorial (\\ (n) (letrec (",
"   (help (\\ (n total)",
"     (let n (? n)",
"     (let total (? total)",
"     (if (prim-lt n 2)",
"       total",
"       ( (? help) (prim-sub n 1) (prim-mul n total) ))))))",
"   )",
"   ( (? help) n 1))))",
")",
"((? factorial) (! ((? thirteen))))",
")"
    ]
  },
  {
    "id": 3,
    "text_multiline": [
"(letrec (",
"  (pair (\\ (a b)",
"    (! (\\ (p) ((? p) a b)))))",
"  (pair-fst (\\ (p)",
"    ((? p) (! (\\ (a b) a)))))",
"  (pair-snd (\\ (p)",
"    ((? p) (! (\\ (a b) b)))))",
"  (is-even (\\ (n)",
"    (let n (? n)",
"    (prim-eq 0 (prim-mod n 2)))))",
")",
"(let p1 ((? pair) 3 is-even)",
"(let num ((? pair-fst) p1)",
"(let fn ((? pair-snd) p1)",
"((? fn) num) )))",
")"
    ]
  }
]
