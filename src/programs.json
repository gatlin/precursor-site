[
  {
    "id": 0,
    "text_multiline": [
      "(letrec (",
      "  (yield (\\ (value) (shift k (! (\\ (p) ((? p) value k))))))",
      "  (next (\\ (gen)",
      "    (let k ( (? gen) (! (\\ (a b) b)))",
      "    (k _))))",
      "  (peek (\\ (gen)",
      "    ( (? gen) (! (\\ (a b) a)))))",
      "  )",
      "(let gen (reset",
      "  (let _ ((? yield) 1)",
      "  (let _ ((? yield) 2)",
      "         ((? yield) 3))))",
      "(let n1 ((? peek) gen)",
      "(let gen ((? next) gen)",
      "(let n2 ((? peek) gen)",
      "(let gen ((? next) gen)",
      "(let n3 ((? peek) gen)",
      "(prim-add (prim-add n1 n2) n3)))))))",
      ")"
    ]
  },
  {
    "id": 1,
    "text_multiline": [
"(letrec (",
"  (make-reducer (\\ (initial-value) (letrec (",
"    (loop (\\ (total first-run) (reset",
"      (let n (shift k k)",
"      (if (prim-and",
"            (prim-eq n 0)",
"            (prim-not first-run))",
"        total",
"        ((? loop) (prim-add n total) #f  ))))))",
"    )",
"    ((? loop) initial-value #t)",
"  )))",
")",
"(let the-reducer ((? make-reducer) 911177)",
"(let the-reducer (the-reducer 69)",
"(let the-reducer (the-reducer 420)",
"(the-reducer 0))))",
")"
    ]
  },
  {
    "id": 2,
    "text_multiline": [
"(letrec (",
"  (thirteen (\\ ()",
"    (let twelve (reset",
"      (let three-then-six (shift times-2",
"        (let six (times-2 3)",
"        (times-2 six)))",
"      (prim-mul 2 three-then-six)))",
"    (prim-add twelve 1))))",
" (factorial (\\ (n) (letrec (",
"   (help (\\ (n total)",
"     (let n (? n)",
"     (let total (? total)",
"     (if (prim-lt n 2)",
"       total",
"       ( (? help) (prim-sub n 1) (prim-mul n total) ))))))",
"   )",
"   ( (? help) n 1))))",
")",
"((? factorial) (! ((? thirteen))))",
")"
    ]
  },
  {
    "id": 3,
    "text_multiline": [
"(letrec (",
"  (foldr (\\ (c e xs)",
"    (let xs (? xs)",
"    ( (? xs) c e ) )))",
"  (nil (\\ () (! (\\ (c e) e))))",
"  (cons (\\ (x xs) (! (\\ (c e)",
"    ( (? c)",
"      x",
"      (! ( (? foldr)",
"        c",
"        e",
"        xs )))))))",
")",
"(let list-1",
"  (! ((? cons) 10",
"  (! ((? cons) 20",
"  (! ((? cons) 86",
"  (! ((? nil)))))))))",
"( (? foldr)",
"    (! (\\ (a b)",
"      (let a (? a)",
"      (let b (? b)",
"      (prim-add a b)))))",
"    7",
"    list-1 ))",
")"
    ]
  },
  {
    "id": 4,
    "text_multiline": [
"(letrec (",
"  (load (λ () (shift k",
"    (! (λ (l _) ((? l) k))))))",
"",
"  (save (λ (v) (shift k",
"    (! (λ (_ s) ((? s) v k))))))",
"",
"  (return (λ (x) (shift k",
"    (! (λ (_ _) (? x))))))",
"",
"  (run-state (λ (st comp)",
"    (let handle (reset (? comp))",
"    ((? handle)",
"       (! (λ (k)",
"         (let result (! (k st))",
"         ((? run-state) st result))))",
"       (! (λ (v k)",
"         (let result (! (k _))",
"         ((? run-state) v result))))))))",
"",
"  (incr-state (λ ()",
"    (let n ((? load))",
"    (let _ ((? save) (prim-add n 1))",
"    (let result ((? load))",
"    ((? return) result))))))",
"  )",
"((? run-state) 419 (! ((? incr-state))))",
")"
    ]

  }
]
